name: 'Git Tag'
description: 'Create a git tag or read tag information from a comment.'
inputs:
  create:
    description: 'Whether to create a tag comment.'
    required: true
    default: ''
  read:
    description: 'Whether to read a tag comment.'
    required: true
    default: ''
  pr-number:
    description: 'If the action is running on a PR event, this input defines the PR number and the tag will be read from a PR comment. This input should  not be set together with "ref".'
    required: false
    default: ''
  ref:
    description: 'If the action is running on a tag event, this input defined the tag ref (eg. github.ref) and the tag will be read from the ref. This input should  not be set together with "pr-number".'
    required: false
    default: ''
  release-candidate-suffix:
    description: 'If the action is running on a PR, this input defines git tag suffix for the release candidate tag.'
    required: false
    default: 'rc'
  tag-comment-header:
    description: 'The header on the tag comment, used to create the comment and to find existing comments.'
    required: false
    default: "## Tag created"
  tag-comment-body:
    description: 'Markdown content to be appended to the body of the tag comment.'
    required: false
    default: ''
  workflow-run-url:
    description: 'The url of the workflow run.'
    required: false
    default: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
  github-token:
    description: 'The GitHub token used for creating the tag.'
    required: true
outputs:
  tag:
    description: 'The name of the tag.'
    value: ${{ steps.read-pr-tag.outputs.tag }}
  is-final:
    description: 'Whether the release is a final release (eg v1.2.3).'
    value: ${{ steps.read-pr-tag.outputs.is-final }}
  sha:
    description: 'The sha of the tagged commit.'
    value: ${{ steps.read-pr-tag.outputs.sha }}
  pr-number:
    description: 'The PR number referenced in release candidate tags.'
    value: ${{ steps.read-pr-tag.outputs.pr-number }}
runs:
  using: "composite"
  steps:
    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.52.0
      if: inputs.create
      id: tag
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        WITH_V: true
        PRERELEASE_SUFFIX: pr${{ inputs.pr-number }}-${{ inputs.release-candidate-suffix }}
        PRERELEASE: ${{ inputs.pr-number != 0 }}
    - name: Export new tag to environment
      if: inputs.create
      shell: bash
      run: echo "tag=${tag}" >> "${GITHUB_ENV}"
      env:
        tag: ${{ steps.tag.outputs.new_tag }}
    - name: Find Tag Comment
      uses: peter-evans/find-comment@v2
      if: (inputs.read || inputs.create) && inputs.pr-number
      id: find-tag-comment
      with:
        issue-number: ${{ inputs.pr-number }}
        comment-author: 'github-actions[bot]'
        body-includes: ${{ inputs.tag-comment-header }}
        direction: last
    - name: Check tag was found
      uses: actions/github-script@v6
      if: inputs.read && inputs.pr-number && steps.find-tag-comment.outputs.comment-id == 0
      with:
        script: |
          core.setFailed('PR tag comment not found! Try creating one first.')
    - name: Read Tag from PR comment
      if: inputs.read && inputs.pr-number
      shell: bash
      run: |
        cat > .tmp-comment-body << 'EOT'
        ${{ steps.find-tag-comment.outputs.comment-body }}
        EOT
        tag="$( grep "Tag: " .tmp-comment-body | sed -E "s/Tag: \`(.*)\`.*/\1/" | xargs )"

        echo "::debug::tag = ${tag}"
        echo "tag=${tag}" >> "${GITHUB_ENV}"
    - name: Read tag from tag ref
      if: inputs.read && inputs.ref
      shell: bash
      run: |
        tag="${tag_ref/refs\/tags\//}"
        echo "tag=${tag}" >> "${GITHUB_ENV}"
        echo "::debug::tag = ${tag}"
      env:
        tag_ref: ${{ inputs.ref }}
    - name: Extract tag information
      id: read-pr-tag
      shell: bash
      run: |
        # Determine if tag is candidate or final release
        if [[ "${tag}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            is_final="true"
        else
            is_final="false"
        fi

        # Determine the commit sha of the commit that originated the tag
        if [[ "${is_final}" == "true" ]]; then
          # Final release tagged on main
          sha="${{ github.event.after }}"
        else
          # Release candidate tagged on PR
          message='${{ github.event.commits[0].message }}'
          echo "DEBUG :: reading commit message to discover SHA"
          echo "DEBUG :: commit message = ${message}"
          sha="$( sed -e "s/Merge //" -e "s/ into .*//" <<<"${message}" )"
        fi

        pr_number=$( sed -E -e "s/v[0-9]+\.[0-9]+.[0-9]+//" -e "s/-pr//" -e "s/-${rc_suffix}.[0-9]+//" <<<"${tag}" )

        echo "is-final=${is_final}" >> "${GITHUB_OUTPUT}"
        echo "sha=${sha}" >> "${GITHUB_OUTPUT}"
        echo "name=${tag_name}" >> "${GITHUB_OUTPUT}"
        echo "pr-number=${pr_number}" >> "${GITHUB_OUTPUT}"
        echo "tag=${tag}" >> "${GITHUB_OUTPUT}"
        # debug outputs
        echo "::debug::is-final=${is_final}"
        echo "::debug::sha=${sha}"
        echo "::debug::name=${tag_name}"
        echo "::debug::pr-number=${pr_number}"
      env:
        rc_suffix: ${{ inputs.release-candidate-suffix }}
    - name: Prepare tag PR comment content
      id: tag-comment
      if: inputs.create && inputs.pr-number
      shell: bash
      run: |
        echo "tag_comment_body<<EOT" >> "${GITHUB_OUTPUT}"
        echo "" >> "${GITHUB_OUTPUT}"
        echo "" >> "${GITHUB_OUTPUT}"
        echo "${comment_body}" >> "${GITHUB_OUTPUT}"
        echo "EOT" >> "${GITHUB_OUTPUT}"

        footer="<sub><sup>*Generated by [workflow ${{ github.run_id }}](${{ inputs.workflow-run-url }})*"
        if [[ "${{ steps.find-tag-comment.outputs.comment-id }}" != "" ]]; then
          echo "::debug::comment updated"
          updated="(comment updated ♻️)"
        fi
        echo "footer=${footer} ${updated}</sup></sub>" >> "${GITHUB_OUTPUT}"
      env:
        found_comment_id: ${{ steps.find-tag-comment.outputs.comment-id }}
        github_run_id: ${{ github.run_id }}
        github_server_url: (${{ github.server_url }}
        comment_body: ${{ inputs.tag-comment-body }}
    - name: Render tag PR comment template
      uses: chuhlomin/render-template@v1.6
      id: template
      if: inputs.create && inputs.pr-number
      with:
        template: .github/templates/tag-comment.md
        vars: |
          header: "${{ inputs.tag-comment-header }}"
          tag: "${{ steps.tag.outputs.new_tag }}"
          body: "${{ steps.tag-comment.outputs.tag_comment_body }}"
          footer: "${{ steps.tag-comment.outputs.footer }}"
    - name: Create tag PR comment
      uses: peter-evans/create-or-update-comment@v2
      if: inputs.create && inputs.pr-number
      with:
        edit-mode: replace
        issue-number: ${{ inputs.pr-number }}
        comment-id: ${{ steps.find-tag-comment.outputs.comment-id }}
        body: ${{ steps.template.outputs.result }}
